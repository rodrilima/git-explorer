{"version":3,"sources":["assets/logo.svg","assets/bg.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","div","Repositories","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logo","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","key","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","rel","title","user","Routes","path","exact","component","App","basename","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b122353.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/bg.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F0F0F0 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3A4A4A;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3A4A4A;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    ${(props) => props.hasError && css`\n      border-color: #c53030;\n    `}\n\n    &::placeholder{\n      color: #A8A8A8;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04D361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #FFF;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')}\n    }\n  }\n`;\n\nexport const Error = styled.div`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #FFF;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3D3D4D;\n      }\n\n      p {\n        font-size: 18px;\n        color: #A8A8B3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\n\nimport logo from '../../assets/logo.svg';\nimport api from '../../services/api';\n\nimport {\n  Title, Form, Repositories, Error,\n} from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n\n  const [inputError, setInputError] = useState('');\n\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n    if (storagedRepositories) return JSON.parse(storagedRepositories);\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]);\n\n  async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n    event.preventDefault();\n    if (!newRepo) return setInputError('Digite o autor/nome do reposit贸rio');\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n      setNewRepo('');\n      setInputError('');\n      return setRepositories([...repositories, repository]);\n    } catch (err) {\n      return setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n\n  return (\n    <>\n\n      <img src={logo} alt=\"Github Explorer\" />\n\n      <Title>Explore Reposit贸rios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      { inputError && <Error>{inputError}</Error> }\n\n      <Repositories>\n        {repositories.map((repository) => (\n          <Link to={`/repositories/${repository.full_name}`} key={repository.full_name}>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius:50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n\n      & + li {\n        margin-left: 80px;\n      }\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\nmargin-top: 80px;\n\na {\n  background: #FFF;\n  border-radius: 5px;\n  width: 100%;\n  padding: 24px;\n  display: block;\n  text-decoration: none;\n\n  display: flex;\n  align-items: center;\n  transition: transform 0.2s;\n\n  & + a {\n    margin-top: 16px;\n  }\n\n  &:hover {\n    transform: translateX(10px);\n  }\n\n  div {\n    margin: 0 16px;\n    flex: 1;\n\n    strong {\n      font-size: 20px;\n      color: #3D3D4D;\n    }\n\n    p {\n      font-size: 18px;\n      color: #A8A8B3;\n      margin-top: 4px;\n    }\n  }\n  svg {\n    margin-left: auto;\n    color: #cbcbd6;\n  }\n}\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport logo from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  user: {\n    login: string;\n  };\n  html_url: string;\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(({ data }) => {\n      setRepository(data);\n    });\n    api.get(`repos/${params.repository}/issues`).then(({ data }) => {\n      setIssues(data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logo} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      { repository && (\n        <RepositoryInfo>\n          <header>\n            <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues Abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      ) }\n\n      <Issues>\n        { issues.map((issue) => (\n          <a key={issue.id} href={issue.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        )) }\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}